openapi: 3.1.0
info:
  title: "Dalia's Library Service"
  description: |
    This API allows browsing a book collection and borrowing books
    as well as admin functions related to administration of
    the book collection.
  version: 1.0.0
servers:
  - url: http://127.0.0.1:8080/public-library/v1
paths:
  /library:
    get:
      summary: Get all books
      description: gets paginated list of all books in the collection
      parameters:
        - name: sortTerm
          in: query
          description: Category to sort results by
          schema:
            $ref: "#/components/parameters/term"
        - name: available
          in: query
          description: Only return books which are not currently checked out
          schema:
            type: boolean
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/bookOverview"
        "400":
          description: invalid sort parameter was used
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: no books were found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /library/search:
    get:
      summary: Search for books
      description: gets list of all books matching a certain search criterion
      parameters:
        - name: searchTerm
          in: query
          type: string
          schema:
            $ref: "#/components/parameters/term"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/bookOverview"
        "400":
          description: invalid parameters passed in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: no books were found matching those search criteria
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /book/{id}:
    get:
      summary: Retrieve a book
      description: gets the full details of a book
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type:
                  $ref: "#/components/schemas/book"
        "404":
          description: book not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    put:
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Create or update a book entry
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/book"
      responses:
        "204":
          description: book details successfully updated
        "400":
          description: invalid request body or missing fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: book not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    delete:
      parameters:
        $ref: "#/components/parameters/bookId"
      requestBody:
        description: Delete a book entry
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/book"
      responses:
        "204":
          description: book successfully deleted
        "404":
          description: book not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /borrow:
    post:
      description: Borrow a book for the current user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/book"
      responses:
        "200":
          description: "OK - returns due date for returning book"
          content:
            application/json:
              type: date
        "400":
          description: bad request format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: book or user not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
components:
  schemas:
    book:
      description: Full details of a book
      type: object
      properties:
        bookId:
          type: integer
          minimum: 0
        title:
          type: string
        author:
          type: string
        edition:
          type: string
        year:
          type: integer
          minimum: -4000
          maximum: 2100
        isbn:
          type: string
        bookType:
          type:
            type: string
          enum:
            - Hardcover
            - Paperback
            - Comic
            - ArtBook
            - Manuscript
        coverUrl:
          type: string
        available:
          type: boolean
    bookOverview:
      description: Short display details of a book
      type: object
      properties:
        title:
          type: string
        author:
          type: string
        coverUrl:
          description: URL pointing to the cover image of the book
          type: string
    error:
      type: object
      properties:
        statusCode:
          type: integer
        message:
          type: string
  parameters:
    term:
      type: string
      enum:
        - title
        - author
        - bookType
    bookId:
      - name: bookId
        in: path
        type: integer
        required: true
